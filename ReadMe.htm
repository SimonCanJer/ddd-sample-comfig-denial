                          
						  Rationale.
						  
				The project implements the decribed task fro Java environment.
				          
						  Design and pattern.
				
				    The project implemented in accordance to a DDD and TDD paradigms.
				Thus, domain logic (Domain.class, com.denial.backend.domnain package) is severe environment independent and can be executed
				in any JEE /Spring environment.
				    The project  can be configured for any Web Service enironment, because uses mechanism or dynamic configuration of Server
				that is done in the  com.denial.config.package. 
				Domain logic and Server are interfaced over IServer and IDomain interface. The Server class initalizes Web Service and domain over IServer
				interface and ClassFactory
				IDomain and IServer instances obtained ever a static field of the Supplier type, whith Lazy instance activation
				Initialization of instance providers for IServer and IDomain is done in the com.denial.backend.api package.
				In this realization the solution uses Spring Boot/REST framework  with embedded Tomcat. This is done under the hood in the SpringSupplier and
				SpringServer(which does manages Spring initialization0
				
				
				         Workflow.
				    A controller (JerseyController in this case) gets a POST request with client id,, calls domain logic (IDomain.process),and ependently
                on result, returns either 200(when true), or 503 else.
				    Domain logic data are in memory stored and, the workflow is a thread safe and uses non blocking (CAS) mode of data access, 
				    NOTE, that Jersey version of Service expects "Content-Type", "application/x-www-form-urlencoded" header.
					The Client and tests use exactly the header meaning that parameters transmitted as data stream,not as URL part.
					     Tests.
					Tests are implemented for domain classes and the JerseyServer, as unit and integated onces.
					     
						 Launch
				The main class of the application jar is com.denial.Launcher, which creates either Client or Server configuration depenently
				on application argument ("server","client"). See launching scripts.
				In order to stop client/server process Enter must be pressed.
				 IMPORTANT NOTE.
				The implemented server mechanism looks up for a free port, because it is not compulsory that 8080 is free.
				Server process displays the on which port server is running.
				Discovery mechanism is not a part of the project, so, Client asks to input the port, which server is boun to.
				
				
				
				          Description.
				The project is a maven project, which can be compiled in a maven environment using mvn install, which runs all the tests.
				In order to automate install and run the project directory contains also shell command files, which can be ran in Windows and
				Linux environment.
				
				          